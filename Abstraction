Class level modifiers-
For top level classes these modifiers are allowed-
public- You can access this class from anywhere(inside package or outside package)
default- You can access this class Inside package(Default is when you dont declare any modifier)
Abstarct - if class is abstract, object of this class can not be created
Final- If class is final, child class object is not possible


For inner classes-
private- accessible only in same class
protected- 1.accessible in same package anywhere and 2.outside package in child classes(Imp- but only with child class reference)

package a;
public class Parent { 
protected d() {syso("d"); } 
}

package b;
public class Child extends Parent {
 main() {
 	Parent p = new Parent();
	p.d(); //wrong
	Child c = new Child();
	c.d(); //correct
	Parent p = new Child();
	p.d(); //wrong
  }
  //Should have child reference only
}


Private< Default< protected< Public In order of most accessible

static-

Member Modifiers
_______________

public- It can be accesible anywhere but point to be noted here is - that public member should also be inside a public class, if it is not in a public class
then it wont be accessible


Abstract keyword
________________

Abstract means partial

Data Abstraction is the property by virtue of which only the essential
details are displayed to the user.The trivial or the non-essentials units are not displayed to the user.
Ex: A car is viewed as a car rather than its individual components. 
In java, abstraction is achieved by interfaces and abstract classes. We can achieve 100% abstraction using interfaces.

Abstract method - Declared and not defined. A method defined abstract must always be redefined in the subclass,thus making overriding
compulsory OR either make subclass itself abstract. This is the main advantage of abstract
Abstract class- Any class that contains one or more abstract methods must also be declared with abstract keyword.
Main advantage is you cannot create objects of abstract class. An abstract class may or may not have all abstract methods. An abstract class necessarily does not
need to have abstract methods. We can give dummy implementation of class and still make it as abstract.
Some of them can be concrete methods
Concrete class- Class which has full implementation of methods(abstract and non abstract both)

public class Application {
	public static void main(String[] args) {
		Iphone i1 = new Iphone();
		Samsung s1 = new Samsung();
		showCall(i1); //calling from Iphone object
		showCall(s1); //calling from Samsung object
		}
	
	public static void showCall(Phone obj) {
		//It will call Method call() on basis of type of obj
    obj.call();
	}
}

public class Iphone extends Phone {

	@Override
	public void call() {
		System.out.println("Calling from Iphone");
	}
}

public class Samsung extends Phone {

	@Override
	public void call() {
		System.out.println("Calling from Samsung");
	}
}

public abstract class Phone {
	abstract public void call();
	public void camera() {
		System.out.println("Camera working");
	}
}


Advantages of Abstraction- 
It reduces the complexity of viewing the things.
Avoids code duplication and increases reusability.
Helps to increase security of an application or program as only important details are provided to the user.


